{"version":3,"file":"index-DDlCX0jV.js","sources":["../../../assets/src/sections/manifest.ts","../../../assets/src/api/core/ApiError.ts","../../../assets/src/api/core/CancelablePromise.ts","../../../assets/src/api/core/OpenAPI.ts","../../../assets/src/api/core/request.ts","../../../assets/src/api/services.gen.ts","../../../assets/src/repository/sources/comments.datasource.ts","../../../assets/src/repository/comments.repository.ts","../../../assets/src/dashboards/statistics.element.ts","../../../assets/src/dashboards/manifest.ts","../../../assets/src/contexts/comments.context.ts","../../../assets/src/workspaces/unapprovedcomments.element.ts","../../../assets/src/workspaces/trashedcomments.element.ts","../../../assets/src/workspaces/manifest.ts","../../../assets/src/sidebars/manifest.ts","../../../assets/src/contexts/manifest.ts","../../../assets/src/index.ts"],"sourcesContent":["import { ManifestSection } from '@umbraco-cms/backoffice/extension-registry';\n\nexport const DISCUSSIONS_SECTION_ALIAS = 'uDiscussions.Section';\n\nconst sections : Array<ManifestSection> = [\n    {\n        type: 'section',\n        alias: DISCUSSIONS_SECTION_ALIAS,\n        name : 'Discussions Section',\n        weight: 10,\n        meta : {\n            label : 'Discussions',\n            pathname : 'discussions'\n        }\n    },\n];\n\nexport const manifests = [\n    ...sections\n];","import type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n\tpublic readonly url: string;\n\tpublic readonly status: number;\n\tpublic readonly statusText: string;\n\tpublic readonly body: unknown;\n\tpublic readonly request: ApiRequestOptions;\n\n\tconstructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n\t\tsuper(message);\n\n\t\tthis.name = 'ApiError';\n\t\tthis.url = response.url;\n\t\tthis.status = response.status;\n\t\tthis.statusText = response.statusText;\n\t\tthis.body = response.body;\n\t\tthis.request = request;\n\t}\n}","export class CancelError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = 'CancelError';\n\t}\n\n\tpublic get isCancelled(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport interface OnCancel {\n\treadonly isResolved: boolean;\n\treadonly isRejected: boolean;\n\treadonly isCancelled: boolean;\n\n\t(cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n\tprivate _isResolved: boolean;\n\tprivate _isRejected: boolean;\n\tprivate _isCancelled: boolean;\n\treadonly cancelHandlers: (() => void)[];\n\treadonly promise: Promise<T>;\n\tprivate _resolve?: (value: T | PromiseLike<T>) => void;\n\tprivate _reject?: (reason?: unknown) => void;\n\n\tconstructor(\n\t\texecutor: (\n\t\t\tresolve: (value: T | PromiseLike<T>) => void,\n\t\t\treject: (reason?: unknown) => void,\n\t\t\tonCancel: OnCancel\n\t\t) => void\n\t) {\n\t\tthis._isResolved = false;\n\t\tthis._isRejected = false;\n\t\tthis._isCancelled = false;\n\t\tthis.cancelHandlers = [];\n\t\tthis.promise = new Promise<T>((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis._reject = reject;\n\n\t\t\tconst onResolve = (value: T | PromiseLike<T>): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._isResolved = true;\n\t\t\t\tif (this._resolve) this._resolve(value);\n\t\t\t};\n\n\t\t\tconst onReject = (reason?: unknown): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._isRejected = true;\n\t\t\t\tif (this._reject) this._reject(reason);\n\t\t\t};\n\n\t\t\tconst onCancel = (cancelHandler: () => void): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.cancelHandlers.push(cancelHandler);\n\t\t\t};\n\n\t\t\tObject.defineProperty(onCancel, 'isResolved', {\n\t\t\t\tget: (): boolean => this._isResolved,\n\t\t\t});\n\n\t\t\tObject.defineProperty(onCancel, 'isRejected', {\n\t\t\t\tget: (): boolean => this._isRejected,\n\t\t\t});\n\n\t\t\tObject.defineProperty(onCancel, 'isCancelled', {\n\t\t\t\tget: (): boolean => this._isCancelled,\n\t\t\t});\n\n\t\t\treturn executor(onResolve, onReject, onCancel as OnCancel);\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn \"Cancellable Promise\";\n\t}\n\n\tpublic then<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n\t\tonRejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.promise.then(onFulfilled, onRejected);\n\t}\n\n\tpublic catch<TResult = never>(\n\t\tonRejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | null\n\t): Promise<T | TResult> {\n\t\treturn this.promise.catch(onRejected);\n\t}\n\n\tpublic finally(onFinally?: (() => void) | null): Promise<T> {\n\t\treturn this.promise.finally(onFinally);\n\t}\n\n\tpublic cancel(): void {\n\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isCancelled = true;\n\t\tif (this.cancelHandlers.length) {\n\t\t\ttry {\n\t\t\t\tfor (const cancelHandler of this.cancelHandlers) {\n\t\t\t\t\tcancelHandler();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Cancellation threw an error', error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.cancelHandlers.length = 0;\n\t\tif (this._reject) this._reject(new CancelError('Request aborted'));\n\t}\n\n\tpublic get isCancelled(): boolean {\n\t\treturn this._isCancelled;\n\t}\n}","import type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Headers = Record<string, string>;\ntype Middleware<T> = (value: T) => T | Promise<T>;\ntype Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\n\nexport class Interceptors<T> {\n  _fns: Middleware<T>[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  eject(fn: Middleware<T>): void {\n    const index = this._fns.indexOf(fn);\n    if (index !== -1) {\n      this._fns = [...this._fns.slice(0, index), ...this._fns.slice(index + 1)];\n    }\n  }\n\n  use(fn: Middleware<T>): void {\n    this._fns = [...this._fns, fn];\n  }\n}\n\nexport type OpenAPIConfig = {\n\tBASE: string;\n\tCREDENTIALS: 'include' | 'omit' | 'same-origin';\n\tENCODE_PATH?: ((path: string) => string) | undefined;\n\tHEADERS?: Headers | Resolver<Headers> | undefined;\n\tPASSWORD?: string | Resolver<string> | undefined;\n\tTOKEN?: string | Resolver<string> | undefined;\n\tUSERNAME?: string | Resolver<string> | undefined;\n\tVERSION: string;\n\tWITH_CREDENTIALS: boolean;\n\tinterceptors: {\n\t\trequest: Interceptors<RequestInit>;\n\t\tresponse: Interceptors<Response>;\n\t};\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n\tBASE: '',\n\tCREDENTIALS: 'include',\n\tENCODE_PATH: undefined,\n\tHEADERS: undefined,\n\tPASSWORD: undefined,\n\tTOKEN: undefined,\n\tUSERNAME: undefined,\n\tVERSION: 'Latest',\n\tWITH_CREDENTIALS: false,\n\tinterceptors: {\n\t\trequest: new Interceptors(),\n\t\tresponse: new Interceptors(),\n\t},\n};","import { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport const isString = (value: unknown): value is string => {\n\treturn typeof value === 'string';\n};\n\nexport const isStringWithValue = (value: unknown): value is string => {\n\treturn isString(value) && value !== '';\n};\n\nexport const isBlob = (value: any): value is Blob => {\n\treturn value instanceof Blob;\n};\n\nexport const isFormData = (value: unknown): value is FormData => {\n\treturn value instanceof FormData;\n};\n\nexport const base64 = (str: string): string => {\n\ttry {\n\t\treturn btoa(str);\n\t} catch (err) {\n\t\t// @ts-ignore\n\t\treturn Buffer.from(str).toString('base64');\n\t}\n};\n\nexport const getQueryString = (params: Record<string, unknown>): string => {\n\tconst qs: string[] = [];\n\n\tconst append = (key: string, value: unknown) => {\n\t\tqs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n\t};\n\n\tconst encodePair = (key: string, value: unknown) => {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (value instanceof Date) {\n\t\t\tappend(key, value.toISOString());\n\t\t} else if (Array.isArray(value)) {\n\t\t\tvalue.forEach(v => encodePair(key, v));\n\t\t} else if (typeof value === 'object') {\n\t\t\tObject.entries(value).forEach(([k, v]) => encodePair(`${key}[${k}]`, v));\n\t\t} else {\n\t\t\tappend(key, value);\n\t\t}\n\t};\n\n\tObject.entries(params).forEach(([key, value]) => encodePair(key, value));\n\n\treturn qs.length ? `?${qs.join('&')}` : '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n\tconst encoder = config.ENCODE_PATH || encodeURI;\n\n\tconst path = options.url\n\t\t.replace('{api-version}', config.VERSION)\n\t\t.replace(/{(.*?)}/g, (substring: string, group: string) => {\n\t\t\tif (options.path?.hasOwnProperty(group)) {\n\t\t\t\treturn encoder(String(options.path[group]));\n\t\t\t}\n\t\t\treturn substring;\n\t\t});\n\n\tconst url = config.BASE + path;\n\treturn options.query ? url + getQueryString(options.query) : url;\n};\n\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\n\tif (options.formData) {\n\t\tconst formData = new FormData();\n\n\t\tconst process = (key: string, value: unknown) => {\n\t\t\tif (isString(value) || isBlob(value)) {\n\t\t\t\tformData.append(key, value);\n\t\t\t} else {\n\t\t\t\tformData.append(key, JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tObject.entries(options.formData)\n\t\t\t.filter(([, value]) => value !== undefined && value !== null)\n\t\t\t.forEach(([key, value]) => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tvalue.forEach(v => process(key, v));\n\t\t\t\t} else {\n\t\t\t\t\tprocess(key, value);\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn formData;\n\t}\n\treturn undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\n\nexport const resolve = async <T>(options: ApiRequestOptions<T>, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n\tif (typeof resolver === 'function') {\n\t\treturn (resolver as Resolver<T>)(options);\n\t}\n\treturn resolver;\n};\n\nexport const getHeaders = async <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): Promise<Headers> => {\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\n\t\t// @ts-ignore\n\t\tresolve(options, config.TOKEN),\n\t\t// @ts-ignore\n\t\tresolve(options, config.USERNAME),\n\t\t// @ts-ignore\n\t\tresolve(options, config.PASSWORD),\n\t\t// @ts-ignore\n\t\tresolve(options, config.HEADERS),\n\t]);\n\n\tconst headers = Object.entries({\n\t\tAccept: 'application/json',\n\t\t...additionalHeaders,\n\t\t...options.headers,\n\t})\n\t\t.filter(([, value]) => value !== undefined && value !== null)\n\t\t.reduce((headers, [key, value]) => ({\n\t\t\t...headers,\n\t\t\t[key]: String(value),\n\t\t}), {} as Record<string, string>);\n\n\tif (isStringWithValue(token)) {\n\t\theaders['Authorization'] = `Bearer ${token}`;\n\t}\n\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\n\t\tconst credentials = base64(`${username}:${password}`);\n\t\theaders['Authorization'] = `Basic ${credentials}`;\n\t}\n\n\tif (options.body !== undefined) {\n\t\tif (options.mediaType) {\n\t\t\theaders['Content-Type'] = options.mediaType;\n\t\t} else if (isBlob(options.body)) {\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\n\t\t} else if (isString(options.body)) {\n\t\t\theaders['Content-Type'] = 'text/plain';\n\t\t} else if (!isFormData(options.body)) {\n\t\t\theaders['Content-Type'] = 'application/json';\n\t\t}\n\t}\n\n\treturn new Headers(headers);\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): unknown => {\n\tif (options.body !== undefined) {\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\n\t\t\treturn JSON.stringify(options.body);\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n\t\t\treturn options.body;\n\t\t} else {\n\t\t\treturn JSON.stringify(options.body);\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const sendRequest = async (\n\tconfig: OpenAPIConfig,\n\toptions: ApiRequestOptions,\n\turl: string,\n\tbody: any,\n\tformData: FormData | undefined,\n\theaders: Headers,\n\tonCancel: OnCancel\n): Promise<Response> => {\n\tconst controller = new AbortController();\n\n\tlet request: RequestInit = {\n\t\theaders,\n\t\tbody: body ?? formData,\n\t\tmethod: options.method,\n\t\tsignal: controller.signal,\n\t};\n\n\tif (config.WITH_CREDENTIALS) {\n\t\trequest.credentials = config.CREDENTIALS;\n\t}\n\n\tfor (const fn of config.interceptors.request._fns) {\n\t\trequest = await fn(request);\n\t}\n\n\tonCancel(() => controller.abort());\n\n\treturn await fetch(url, request);\n};\n\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\n\tif (responseHeader) {\n\t\tconst content = response.headers.get(responseHeader);\n\t\tif (isString(content)) {\n\t\t\treturn content;\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const getResponseBody = async (response: Response): Promise<unknown> => {\n\tif (response.status !== 204) {\n\t\ttry {\n\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\tif (contentType) {\n\t\t\t\tconst binaryTypes = ['application/octet-stream', 'application/pdf', 'application/zip', 'audio/', 'image/', 'video/'];\n\t\t\t\tif (contentType.includes('application/json') || contentType.includes('+json')) {\n\t\t\t\t\treturn await response.json();\n\t\t\t\t} else if (binaryTypes.some(type => contentType.includes(type))) {\n\t\t\t\t\treturn await response.blob();\n\t\t\t\t} else if (contentType.includes('multipart/form-data')) {\n\t\t\t\t\treturn await response.formData();\n\t\t\t\t} else if (contentType.includes('text/')) {\n\t\t\t\t\treturn await response.text();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n\tconst errors: Record<number, string> = {\n\t\t400: 'Bad Request',\n\t\t401: 'Unauthorized',\n\t\t402: 'Payment Required',\n\t\t403: 'Forbidden',\n\t\t404: 'Not Found',\n\t\t405: 'Method Not Allowed',\n\t\t406: 'Not Acceptable',\n\t\t407: 'Proxy Authentication Required',\n\t\t408: 'Request Timeout',\n\t\t409: 'Conflict',\n\t\t410: 'Gone',\n\t\t411: 'Length Required',\n\t\t412: 'Precondition Failed',\n\t\t413: 'Payload Too Large',\n\t\t414: 'URI Too Long',\n\t\t415: 'Unsupported Media Type',\n\t\t416: 'Range Not Satisfiable',\n\t\t417: 'Expectation Failed',\n\t\t418: 'Im a teapot',\n\t\t421: 'Misdirected Request',\n\t\t422: 'Unprocessable Content',\n\t\t423: 'Locked',\n\t\t424: 'Failed Dependency',\n\t\t425: 'Too Early',\n\t\t426: 'Upgrade Required',\n\t\t428: 'Precondition Required',\n\t\t429: 'Too Many Requests',\n\t\t431: 'Request Header Fields Too Large',\n\t\t451: 'Unavailable For Legal Reasons',\n\t\t500: 'Internal Server Error',\n\t\t501: 'Not Implemented',\n\t\t502: 'Bad Gateway',\n\t\t503: 'Service Unavailable',\n\t\t504: 'Gateway Timeout',\n\t\t505: 'HTTP Version Not Supported',\n\t\t506: 'Variant Also Negotiates',\n\t\t507: 'Insufficient Storage',\n\t\t508: 'Loop Detected',\n\t\t510: 'Not Extended',\n\t\t511: 'Network Authentication Required',\n\t\t...options.errors,\n\t}\n\n\tconst error = errors[result.status];\n\tif (error) {\n\t\tthrow new ApiError(options, result, error);\n\t}\n\n\tif (!result.ok) {\n\t\tconst errorStatus = result.status ?? 'unknown';\n\t\tconst errorStatusText = result.statusText ?? 'unknown';\n\t\tconst errorBody = (() => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(result.body, null, 2);\n\t\t\t} catch (e) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})();\n\n\t\tthrow new ApiError(options, result,\n\t\t\t`Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\n\t\t);\n\t}\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions<T>): CancelablePromise<T> => {\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\n\t\ttry {\n\t\t\tconst url = getUrl(config, options);\n\t\t\tconst formData = getFormData(options);\n\t\t\tconst body = getRequestBody(options);\n\t\t\tconst headers = await getHeaders(config, options);\n\n\t\t\tif (!onCancel.isCancelled) {\n\t\t\t\tlet response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\n\t\t\t\t\tresponse = await fn(response);\n\t\t\t\t}\n\n\t\t\t\tconst responseBody = await getResponseBody(response);\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\n\n\t\t\t\tlet transformedBody = responseBody;\n\t\t\t\tif (options.responseTransformer && response.ok) {\n\t\t\t\t\ttransformedBody = await options.responseTransformer(responseBody)\n\t\t\t\t}\n\n\t\t\t\tconst result: ApiResult = {\n\t\t\t\t\turl,\n\t\t\t\t\tok: response.ok,\n\t\t\t\t\tstatus: response.status,\n\t\t\t\t\tstatusText: response.statusText,\n\t\t\t\t\tbody: responseHeader ?? transformedBody,\n\t\t\t\t};\n\n\t\t\t\tcatchErrorCodes(options, result);\n\n\t\t\t\tresolve(result.body);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { CancelablePromise } from './core/CancelablePromise';\nimport { OpenAPI } from './core/OpenAPI';\nimport { request as __request } from './core/request';\nimport type { GetCommentByIdData, GetCommentByIdResponse, PostCommentsData, PostCommentsResponse, GetCommentsResponse, GetCommentsByContentkeyData, GetCommentsByContentkeyResponse, GetCommentsByContentkeyApprovedData, GetCommentsByContentkeyApprovedResponse, GetCommentsByContentkeyApprovedCountData, GetCommentsByContentkeyApprovedCountResponse, GetCommentsByContentkeyCountData, GetCommentsByContentkeyCountResponse, GetCommentsByContentkeyUnapprovedData, GetCommentsByContentkeyUnapprovedResponse, PatchCommentsByIdApproveData, PatchCommentsByIdApproveResponse, DeleteCommentsByIdDeleteData, DeleteCommentsByIdDeleteResponse, PatchCommentsByIdRestoreData, PatchCommentsByIdRestoreResponse, PatchCommentsByIdTrashData, PatchCommentsByIdTrashResponse, GetCommentsCountResponse, GetCommentsTrashedResponse, GetCommentsTrashedCountResponse, GetCommentsUnapprovedResponse, GetCommentsUnapprovedCountResponse } from './types.gen';\n\nexport class CommmentsService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCommentById(data: GetCommentByIdData): CancelablePromise<GetCommentByIdResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comment/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static postComments(data: PostCommentsData = {}): CancelablePromise<PostCommentsResponse> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/comments',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getComments(): CancelablePromise<GetCommentsResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.contentkey\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCommentsByContentkey(data: GetCommentsByContentkeyData): CancelablePromise<GetCommentsByContentkeyResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/{contentkey}',\n            path: {\n                contentkey: data.contentkey\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.contentkey\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCommentsByContentkeyApproved(data: GetCommentsByContentkeyApprovedData): CancelablePromise<GetCommentsByContentkeyApprovedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/{contentkey}/approved',\n            path: {\n                contentkey: data.contentkey\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.contentkey\n     * @returns number OK\n     * @throws ApiError\n     */\n    public static getCommentsByContentkeyApprovedCount(data: GetCommentsByContentkeyApprovedCountData): CancelablePromise<GetCommentsByContentkeyApprovedCountResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/{contentkey}/approved/count',\n            path: {\n                contentkey: data.contentkey\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.contentkey\n     * @returns number OK\n     * @throws ApiError\n     */\n    public static getCommentsByContentkeyCount(data: GetCommentsByContentkeyCountData): CancelablePromise<GetCommentsByContentkeyCountResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/{contentkey}/count',\n            path: {\n                contentkey: data.contentkey\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.contentkey\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCommentsByContentkeyUnapproved(data: GetCommentsByContentkeyUnapprovedData): CancelablePromise<GetCommentsByContentkeyUnapprovedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/{contentkey}/unapproved',\n            path: {\n                contentkey: data.contentkey\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static patchCommentsByIdApprove(data: PatchCommentsByIdApproveData): CancelablePromise<PatchCommentsByIdApproveResponse> {\n        return __request(OpenAPI, {\n            method: 'PATCH',\n            url: '/comments/{id}/approve',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static deleteCommentsByIdDelete(data: DeleteCommentsByIdDeleteData): CancelablePromise<DeleteCommentsByIdDeleteResponse> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/comments/{id}/delete',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static patchCommentsByIdRestore(data: PatchCommentsByIdRestoreData): CancelablePromise<PatchCommentsByIdRestoreResponse> {\n        return __request(OpenAPI, {\n            method: 'PATCH',\n            url: '/comments/{id}/restore',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static patchCommentsByIdTrash(data: PatchCommentsByIdTrashData): CancelablePromise<PatchCommentsByIdTrashResponse> {\n        return __request(OpenAPI, {\n            method: 'PATCH',\n            url: '/comments/{id}/trash',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns number OK\n     * @throws ApiError\n     */\n    public static getCommentsCount(): CancelablePromise<GetCommentsCountResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/count',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCommentsTrashed(): CancelablePromise<GetCommentsTrashedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/trashed',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns number OK\n     * @throws ApiError\n     */\n    public static getCommentsTrashedCount(): CancelablePromise<GetCommentsTrashedCountResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/trashed/count',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCommentsUnapproved(): CancelablePromise<GetCommentsUnapprovedResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/unapproved',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns number OK\n     * @throws ApiError\n     */\n    public static getCommentsUnapprovedCount(): CancelablePromise<GetCommentsUnapprovedCountResponse> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/comments/unapproved/count',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}","import { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbDataSourceResponse  } from \"@umbraco-cms/backoffice/repository\";\r\nimport { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport { CommentSchema, CommmentsService } from \"../../api\";\r\n\r\n\r\nexport interface ICommentsDataSource {\r\n    getApprovedComments(contentkey: string) : Promise<UmbDataSourceResponse<CommentSchema[]>>;\r\n    getUnapprovedComments(): Promise<UmbDataSourceResponse<CommentSchema[]>>;\r\n    getTrashedComments(): Promise<UmbDataSourceResponse<CommentSchema[]>>;\r\n    approveComment(id: number) : Promise<UmbDataSourceResponse<boolean>>;\r\n    trashComment(id: number) : Promise<UmbDataSourceResponse<boolean>>;\r\n    restoreComment(id: number) : Promise<UmbDataSourceResponse<boolean>>;\r\n    deleteComment(id: number) : Promise<UmbDataSourceResponse<boolean>>\r\n}\r\n\r\nexport class CommentsDataSource implements ICommentsDataSource {\r\n    #host: UmbControllerHost;\r\n\r\n    constructor(host: UmbControllerHost) {\r\n        this.#host = host;\r\n    }\r\n\r\n    async getCommentsCount(): Promise<UmbDataSourceResponse<number>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.getCommentsCount());\r\n    }\r\n\r\n    async getApprovedComments(contentkey: string): Promise<UmbDataSourceResponse<CommentSchema[]>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.getCommentsByContentkeyApproved({contentkey}));\r\n    }\r\n\r\n    async getUnapprovedComments(): Promise<UmbDataSourceResponse<CommentSchema[]>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.getCommentsUnapproved());\r\n    }\r\n\r\n    async getUnapprovedCommentsCount(): Promise<UmbDataSourceResponse<number>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.getCommentsUnapprovedCount());\r\n    }\r\n\r\n    async getTrashedComments(): Promise<UmbDataSourceResponse<CommentSchema[]>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.getCommentsTrashed());\r\n    }\r\n\r\n    async getTrashedCommentsCount(): Promise<UmbDataSourceResponse<number>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.getCommentsTrashedCount());\r\n    }\r\n\r\n    async approveComment(id: number) : Promise<UmbDataSourceResponse<boolean>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.patchCommentsByIdApprove({id}));\r\n    }\r\n\r\n    async trashComment(id: number) : Promise<UmbDataSourceResponse<boolean>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.patchCommentsByIdTrash({id}));\r\n    }\r\n\r\n    async restoreComment(id: number) : Promise<UmbDataSourceResponse<boolean>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.patchCommentsByIdRestore({id}));\r\n    }\r\n\r\n    async deleteComment(id: number) : Promise<UmbDataSourceResponse<boolean>> {\r\n        return await tryExecuteAndNotify(this.#host, CommmentsService.deleteCommentsByIdDelete({id}));\r\n    }\r\n}","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { CommentsDataSource } from \"./sources/comments.datasource\";\r\n\r\nexport class CommentsRespository extends UmbControllerBase {\r\n    #commentsDataSource: CommentsDataSource;\r\n\r\n    constructor(host: UmbControllerHost) {\r\n        super(host);\r\n        this.#commentsDataSource = new CommentsDataSource(this);\r\n    }\r\n\r\n    async getCommentsCount() {\r\n        return this.#commentsDataSource.getCommentsCount();\r\n    }\r\n\r\n    async getApprovedComments(contentkey: string) {\r\n        return this.#commentsDataSource.getApprovedComments(contentkey);\r\n    }\r\n\r\n    async getUnapprovedComments() {\r\n        return this.#commentsDataSource.getUnapprovedComments();\r\n    }\r\n\r\n    async getUnapprovedCommentsCount() {\r\n        return this.#commentsDataSource.getUnapprovedCommentsCount();\r\n    }\r\n\r\n    async getTrashedComments() {\r\n        return this.#commentsDataSource.getTrashedComments();\r\n    }\r\n\r\n    async getTrashedCommentsCount() {\r\n        return this.#commentsDataSource.getTrashedCommentsCount();\r\n    }\r\n\r\n    async approveComment(id: number) {\r\n        return this.#commentsDataSource.approveComment(id);\r\n    }\r\n\r\n    async trashComment(id: number) {\r\n        return this.#commentsDataSource.trashComment(id);\r\n    }\r\n\r\n    async restoreComment(id: number) {\r\n        return this.#commentsDataSource.restoreComment(id);\r\n    }\r\n\r\n    async deleteComment(id: number) {\r\n        return this.#commentsDataSource.deleteComment(id);\r\n    }\r\n}","import { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { LitElement, html, css, customElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { CommentsRespository } from \"../repository/comments.repository\";\r\n\r\n@customElement('statistics-dashboard')\r\nexport class StatisticsDashboard extends UmbElementMixin(LitElement) {\r\n    #commentsRepository? : CommentsRespository;\r\n\r\n    @property()\r\n    title = \"Statistics\"\r\n\r\n    @state()\r\n    commentsCount?: number;\r\n\r\n    @state()\r\n    unapprovedCommentsCount?: number;\r\n\r\n    @state()\r\n    trashedCommentsCount?: number;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.#commentsRepository = new CommentsRespository(this);\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n\r\n        if (this.#commentsRepository)\r\n        {\r\n            this.#commentsRepository.getCommentsCount().then((response) => {\r\n                this.commentsCount = response.data;\r\n            });\r\n\r\n            this.#commentsRepository.getUnapprovedCommentsCount().then((response) => {\r\n                this.unapprovedCommentsCount = response.data;\r\n            });\r\n\r\n            this.#commentsRepository.getTrashedCommentsCount().then((response) => {\r\n                this.trashedCommentsCount = response.data;\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout headline=${this.title}>\r\n                <div class=\"statistics\">\r\n                    <uui-box>\r\n                        <div slot=\"headline\" class=\"statistics__header\">Total Comments</div>\r\n                        <div class=\"statistics__item\">\r\n                            <span class=\"statistics__item__number\">${this.commentsCount ?? 0}</span>\r\n                        </div>\r\n                        <span>Trashed comments are ignored in this statistic</span>\r\n                    </uui-box>\r\n                    <uui-box>\r\n                        <div slot=\"headline\" class=\"statistics__header\">Unapproved comments</div>\r\n                        <div class=\"statistics__item\">\r\n                            <span class=\"statistics__item__number statistics__item__number--warning\">${this.unapprovedCommentsCount ?? 0}</span>\r\n                        </div>\r\n                    </uui-box>\r\n                    <uui-box>\r\n                        <div slot=\"headline\" class=\"statistics__header\">Trashed comments</span></div>\r\n                        <div class=\"statistics__item\">\r\n                            <span class=\"statistics__item__number statistics__item__number--danger\">${this.trashedCommentsCount ?? 0}</span>\r\n                        </div>\r\n                    </uui-box>\r\n                </div>\r\n            </umb-body-layout>\r\n        `\r\n    }\r\n\r\n    static override styles = [\r\n        css`\r\n\t\t\t.statistics {\r\n                display: grid;\r\n                grid-gap: 2rem;\r\n                grid-template-columns: repeat(6, 1fr);\r\n            }\r\n\r\n            .statistics__item {\r\n                display: flex;\r\n                flex-direction: column;\r\n                align-items: center;\r\n                padding: 2rem;\r\n            }\r\n\r\n            .statistics__item__number {\r\n                font-size: 3rem;\r\n                font-weight: 700;\r\n            }\r\n\r\n            .statistics__item__number--positive {\r\n                color: var(--uui-color-positive);\r\n            }\r\n\r\n            .statistics__item__number--warning {\r\n                color: var(--uui-color-warning);\r\n            }\r\n\r\n            .statistics__item__number--danger {\r\n                color: var(--uui-color-danger);\r\n            }\r\n\t\t`,\r\n    ];\r\n\r\n}\r\n\r\nexport default StatisticsDashboard;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'statistics-dashboard': StatisticsDashboard;\r\n    }\r\n}","import type { ManifestDashboard } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { DISCUSSIONS_SECTION_ALIAS } from '../sections/manifest';\r\n\r\nimport StatisticsDashboard from './statistics.element';\r\n\r\nexport const STATISTICS_DASHBOARD_ALIAS = \"uDiscussions.Dashboard.Statistics\";\r\n\r\nconst dashboards: Array<ManifestDashboard> = [\r\n    {\r\n        type: 'dashboard',\r\n        name: 'Statistics Dashboard',\r\n        alias: STATISTICS_DASHBOARD_ALIAS,\r\n        element: StatisticsDashboard,\r\n        weight: -10,\r\n        meta: {\r\n            label: 'Statistics',\r\n            pathname: 'statistics-dashboard'\r\n        },\r\n        conditions: [\r\n            {\r\n                alias: 'Umb.Condition.SectionAlias',\r\n                match: DISCUSSIONS_SECTION_ALIAS\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nexport const manifests = [\r\n    ...dashboards\r\n];","\r\n﻿import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\nimport { UmbArrayState } from \"@umbraco-cms/backoffice/observable-api\";\r\nimport { CommentsRespository } from \"../repository/comments.repository\";\r\nimport { CommentSchema } from \"../api\";\r\n\r\nexport class CommentsContext extends UmbControllerBase {\r\n    #repository: CommentsRespository;\r\n\r\n    #approvedComments = new UmbArrayState<CommentSchema>([], () => undefined);\r\n    public readonly approvedComments = this.#approvedComments.asObservable();\r\n\r\n    #unapprovedComments = new UmbArrayState<CommentSchema>([], () => undefined);\r\n    public readonly unapprovedComments = this.#unapprovedComments.asObservable();\r\n\r\n    #trashedComments = new UmbArrayState<CommentSchema>([], () => undefined);\r\n    public readonly trashedComments = this.#trashedComments.asObservable();\r\n\r\n    constructor(host: UmbControllerHost) {\r\n        super(host);\r\n\r\n        this.provideContext(COMMENTS_CONTEXT, this);\r\n        this.#repository = new CommentsRespository(this);\r\n    }\r\n\r\n    async getApprovedComments(contentkey: string) {\r\n        const { data } = await this.#repository.getApprovedComments(contentkey);\r\n\r\n        if (data) {\r\n            this.#approvedComments.setValue(data);\r\n        } else {\r\n            this.#approvedComments.setValue([]);\r\n        }\r\n    }\r\n\r\n    async getUnapprovedComments() {\r\n        const { data } = await this.#repository.getUnapprovedComments();\r\n\r\n        if (data) {\r\n            this.#unapprovedComments.setValue(data);\r\n        } else {\r\n            this.#unapprovedComments.setValue([]);\r\n        }\r\n    }\r\n\r\n    async getTrashedComments() {\r\n        const { data } = await this.#repository.getTrashedComments();\r\n\r\n        if (data) {\r\n            this.#trashedComments.setValue(data);\r\n        } else {\r\n            this.#trashedComments.setValue([]);\r\n        }\r\n    }\r\n\r\n    async approveComment(id: number) {\r\n        return await this.#repository.approveComment(id);\r\n    }\r\n\r\n    async trashComment(id: number) {\r\n        return await this.#repository.trashComment(id);\r\n    }\r\n\r\n    async restoreComment(id: number) {\r\n        return await this.#repository.restoreComment(id);\r\n    }\r\n\r\n    async deleteComment(id: number) {\r\n        return await this.#repository.deleteComment(id);\r\n    }\r\n}\r\n\r\nexport default CommentsContext;\r\n\r\nexport const COMMENTS_CONTEXT = \r\n    new UmbContextToken<CommentsContext>(CommentsContext.name);\r\n","import { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\r\nimport { LitElement, html, css, customElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { CommentSchema } from '../api';\r\nimport { COMMENTS_CONTEXT, CommentsContext } from '../contexts/comments.context';\r\nimport { UMB_CONFIRM_MODAL, UMB_MODAL_MANAGER_CONTEXT, UmbModalManagerContext } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationContext, UmbNotificationDefaultData } from '@umbraco-cms/backoffice/notification';\r\n\r\n@customElement('unapprovedcomments-workspace-root')\r\nexport class UnapprovedCommentsWorkspaceElement extends UmbElementMixin(LitElement) {\r\n    #commentsContext? : CommentsContext;\r\n    #modalContext?: UmbModalManagerContext;\r\n    #notificationContext?: UmbNotificationContext;\r\n\r\n    @property()\r\n    title = \"Unapproved comments\";\r\n\r\n    @state()\r\n    comments?: CommentSchema[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.consumeContext(COMMENTS_CONTEXT, (_instance) => {\r\n            this.#commentsContext = _instance;\r\n\r\n            this.observe(_instance.unapprovedComments, (_comments: CommentSchema[]) => {\r\n                this.comments = _comments\r\n            });\r\n        });\r\n\r\n        this.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (_instance) => {\r\n            this.#modalContext = _instance;\r\n        });\r\n\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\r\n            this.#notificationContext = _instance;\r\n        });\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n\r\n        if (this.#commentsContext != null) {\r\n            this.getUnapprovedComments();\r\n        }\r\n    }\r\n\r\n    async getUnapprovedComments() {\r\n        await this.#commentsContext?.getUnapprovedComments();\r\n    }\r\n\r\n    #onClickTrash = (comment: CommentSchema) => async (): Promise<void> => {\r\n        const modalHandler = this.#modalContext?.open(this, UMB_CONFIRM_MODAL, {\r\n            data: {\r\n                headline: `Trash`,\r\n                content: 'Are you sure you want to move the comment to the Discussions Recycle Bin?',\r\n                confirmLabel: 'Trash',\r\n                color: 'danger'\r\n            }\r\n        });\r\n\r\n        modalHandler?.onSubmit().then(async () => {\r\n            await this.#commentsContext?.trashComment(comment.id);\r\n            await this.getUnapprovedComments();\r\n\r\n            const data: UmbNotificationDefaultData = {\r\n                headline: `Trashed`,\r\n                message: `The comment has been moved to the Discussions Recycle Bin.`\r\n            };\r\n            await this.#notificationContext?.peek(\"positive\", { data });\r\n        });\r\n    }\r\n\r\n    #onClickApprove = (comment: CommentSchema) => async (): Promise<void> => {\r\n        const modalHandler = this.#modalContext?.open(this, UMB_CONFIRM_MODAL, {\r\n            data: {\r\n                headline: `Approve`,\r\n                content: 'Are you sure you want to approve the comment?',\r\n                confirmLabel: 'Approve',\r\n                color: 'positive'\r\n            }\r\n        });\r\n\r\n        modalHandler?.onSubmit().then(async () => {\r\n            await this.#commentsContext?.approveComment(comment.id);\r\n            await this.getUnapprovedComments();\r\n\r\n            const data: UmbNotificationDefaultData = {\r\n                headline: `Approved`,\r\n                message: `The comment has been approved.`\r\n            };\r\n            await this.#notificationContext?.peek(\"positive\", { data });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout headline='Unapproved Comments'>\r\n                <div class=\"comments\">\r\n                    ${this.comments?.map((comment) => {\r\n                        return html`\r\n                            <uui-box>\r\n                                <div slot=\"headline\">${comment.author}</div>\r\n                                <div slot=\"header\">${comment.date}</div>\r\n                                <div slot=\"header-actions\">\r\n                                    <uui-button pristine label=\"Delete\" look=\"primary\" color=\"danger\" @click=${this.#onClickTrash(comment)}>\r\n                                        <uui-icon name=\"delete\"></uui-icon>\r\n                                    </uui-button>\r\n                                    <uui-button pristine label=\"Approve\" look=\"primary\" color=\"positive\" @click=${this.#onClickApprove(comment)}>\r\n                                        Approve\r\n                                    </uui-button>\r\n                                </div>\r\n                                <div class=\"comment\">\r\n                                    <p class=\"comment__message\">${comment.message}</p>\r\n                                    <uui-ref-node name=${comment.contentName} detail=${comment.contentKey} readonly standalone></uui-ref-node>\r\n                                </div>\r\n                            </uui-box>\r\n                        `\r\n                    })}\r\n                </div>\r\n            </umb-body-layout>\r\n        `\r\n    }\r\n\r\n    static override styles = [\r\n        css`\r\n            .comments {\r\n                display: grid;\r\n                grid-gap: 2rem;\r\n                grid-template-columns: repeat(3, 1fr);\r\n            }\r\n\r\n            .comment {\r\n                display: flex;\r\n                gap: 2rem;\r\n                flex-direction: column;\r\n            }\r\n\r\n            .comment__message {\r\n                margin: 0;\r\n            }\r\n\r\n            .comment uui-ref-node {\r\n                padding: 1rem;\r\n            }\r\n        `\r\n    ];\r\n}\r\n\r\nexport default UnapprovedCommentsWorkspaceElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'unapprovedcomments-workspace-root': UnapprovedCommentsWorkspaceElement\r\n\t}\r\n}","import { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\r\nimport { LitElement, html, css, customElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { CommentSchema } from '../api';\r\nimport { COMMENTS_CONTEXT, CommentsContext } from '../contexts/comments.context';\r\nimport { UMB_CONFIRM_MODAL, UMB_MODAL_MANAGER_CONTEXT, UmbModalManagerContext } from '@umbraco-cms/backoffice/modal';\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationContext, UmbNotificationDefaultData } from '@umbraco-cms/backoffice/notification';\r\n\r\n@customElement('trashedcomments-workspace-root')\r\nexport class TrashedCommentsWorkspaceElement extends UmbElementMixin(LitElement) {\r\n    #commentsContext? : CommentsContext;\r\n    #modalContext?: UmbModalManagerContext;\r\n    #notificationContext?: UmbNotificationContext;\r\n\r\n    @property()\r\n    title = \"Recycle Bin\";\r\n\r\n    @state()\r\n    comments?: CommentSchema[];\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.consumeContext(COMMENTS_CONTEXT, (_instance) => {\r\n            this.#commentsContext = _instance;\r\n\r\n            this.observe(_instance.trashedComments, (_comments: CommentSchema[]) => {\r\n                this.comments = _comments;\r\n            });\r\n        });\r\n\r\n        this.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (_instance) => {\r\n            this.#modalContext = _instance;\r\n        });\r\n\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\r\n            this.#notificationContext = _instance;\r\n        });\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n\r\n        if (this.#commentsContext != null) {\r\n            this.getTrashedComments();\r\n        }\r\n    }\r\n\r\n    async getTrashedComments() {\r\n        await this.#commentsContext?.getTrashedComments();\r\n    }\r\n\r\n    #onClickDelete = (comment: CommentSchema) => async (): Promise<void> => {\r\n        const modalHandler = this.#modalContext?.open(this, UMB_CONFIRM_MODAL, {\r\n            data: {\r\n                headline: `Delete`,\r\n                content: 'Are you sure you want to delete the comment?',\r\n                confirmLabel: 'Delete',\r\n                color: 'danger'\r\n            }\r\n        });\r\n\r\n        modalHandler?.onSubmit().then(async () => {\r\n            await this.#commentsContext?.deleteComment(comment.id);\r\n            await this.getTrashedComments();\r\n\r\n            const data: UmbNotificationDefaultData = {\r\n                headline: `Deleted`,\r\n                message: `The comment has been deleted.`\r\n            };\r\n            await this.#notificationContext?.peek(\"positive\", { data });\r\n        });\r\n    }\r\n\r\n    #onClickRestore = (comment: CommentSchema) => async (): Promise<void> => {\r\n        const modalHandler = this.#modalContext?.open(this, UMB_CONFIRM_MODAL, {\r\n            data: {\r\n                headline: `Restore`,\r\n                content: \"Are you sure you want to restore the comment to <strong>\" + (comment.approved ? \"Approved Comments\" : \"Unapproved Comments\") + \"</strong>?\",\r\n                confirmLabel: 'Restore',\r\n                color: 'positive'\r\n            }\r\n        });\r\n\r\n        modalHandler?.onSubmit().then(async () => {\r\n            await this.#commentsContext?.restoreComment(comment.id);\r\n            await this.getTrashedComments();\r\n\r\n            const data: UmbNotificationDefaultData = {\r\n                headline: `Restored`,\r\n                message: `The comment has been restored.`\r\n            };\r\n            await this.#notificationContext?.peek(\"positive\", { data });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout headline=${this.title}>\r\n                <div class=\"comments\">\r\n                    ${this.comments?.map((comment) => {\r\n                        return html`\r\n                            <uui-box>\r\n                                <div slot=\"headline\">${comment.author}</div>\r\n                                <div slot=\"header\">${comment.date}</div>\r\n                                <div slot=\"header-actions\">\r\n                                    <uui-button pristine label=\"Delete\" look=\"primary\" color=\"danger\" @click=${this.#onClickDelete(comment)}>\r\n                                        <uui-icon name=\"delete\"></uui-icon>\r\n                                    </uui-button>\r\n                                    <uui-button pristine label=\"Restore\" look=\"primary\" color=\"default\" @click=${this.#onClickRestore(comment)}>\r\n                                        Restore\r\n                                    </uui-button>\r\n                                </div>\r\n                                <div class=\"comment\">\r\n                                    <p class=\"comment__message\">${comment.message}</p>\r\n                                    <uui-ref-node name=${comment.contentName} detail=${comment.contentKey} readonly standalone></uui-ref-node>\r\n                                    <uui-tag color=\"${comment.approved ? \"positive\" : \"danger\"}\">${comment.approved ? \"Approved\" : \"Unapproved\"}</uui-tag>\r\n                                </div>\r\n                            </uui-box>\r\n                        `\r\n                    })}\r\n                </div>\r\n            </umb-body-layout>\r\n        `\r\n    }\r\n\r\n    static override styles = [\r\n        css`\r\n            .comments {\r\n                display: grid;\r\n                grid-gap: 2rem;\r\n                grid-template-columns: repeat(3, 1fr);\r\n            }\r\n\r\n            .comment {\r\n                display: flex;\r\n                gap: 2rem;\r\n                flex-direction: column;\r\n            }\r\n\r\n            .comment__message {\r\n                margin: 0;\r\n            }\r\n\r\n            .comment uui-ref-node {\r\n                padding: 1rem;\r\n            }\r\n        `\r\n    ];\r\n}\r\n\r\nexport default TrashedCommentsWorkspaceElement;\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'trashedcomments-workspace-root': TrashedCommentsWorkspaceElement\r\n\t}\r\n}","import { ManifestModal, ManifestWorkspace, ManifestWorkspaceAction, ManifestWorkspaceContext, ManifestWorkspaceView } from \"@umbraco-cms/backoffice/extension-registry\";\r\nimport UnapprovedCommentsWorkspaceElement from \"./unapprovedcomments.element\";\r\n\r\n\r\n\r\nexport const APPROVEDCOMMENTS_WORKSPACE_ALIAS = \"ApprovedComments.Workspace.Alias\";\r\nexport const APPROVEDCOMMENTS_ENTITY = \"approved-comments\";\r\n\r\nexport const UNAPPROVEDCOMMENTS_WORKSPACE_ALIAS = \"UnapprovedComments.Workspace.Alias\";\r\nexport const UNAPPROVEDCOMMENTS_ENTITY = \"unapproved-comments\";\r\n\r\nexport const TRASHEDCOMMENTS_WORKSPACE_ALIAS = \"TrashedComments.Workspace.Alias\";\r\nexport const TRASHEDCOMMENTS_ENTITY = \"trashed-comments\";\r\nimport TrashedCommentsWorkspaceElement from \"./trashedcomments.element\";\r\n\r\nexport const workspaces : Array<ManifestWorkspace> = [\r\n    {\r\n        type: 'workspace',\r\n        alias: UNAPPROVEDCOMMENTS_WORKSPACE_ALIAS,\r\n        name: 'Unapproved Comments Workspace',\r\n        element: UnapprovedCommentsWorkspaceElement,\r\n        meta: {\r\n            entityType: UNAPPROVEDCOMMENTS_ENTITY\r\n        }\r\n    },\r\n    {\r\n        type: 'workspace',\r\n        alias: TRASHEDCOMMENTS_WORKSPACE_ALIAS,\r\n        name: 'Trashed Comments Workspace',\r\n        element: TrashedCommentsWorkspaceElement,\r\n        meta: {\r\n            entityType: TRASHEDCOMMENTS_ENTITY\r\n        }\r\n    }\r\n];\r\n\r\nvar workspaceViews: Array<ManifestWorkspaceView> = [\r\n    {\r\n        type: 'workspaceView',\r\n        alias: APPROVEDCOMMENTS_WORKSPACE_ALIAS,\r\n        name: 'Approved Comments Workspace',\r\n        js: () => import('./views/approvedcomments.element'),\r\n        weight: 10,\r\n        meta: {\r\n            icon: 'icon-chat',\r\n            pathname: 'comments',\r\n            label: 'Comments'\r\n        },\r\n        conditions: [\r\n            {\r\n                alias: 'Umb.Condition.WorkspaceAlias',\r\n                match: 'Umb.Workspace.Document'\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nconst workspaceContexts : Array<ManifestWorkspaceContext> = [\r\n    {\r\n        type: 'workspaceContext',\r\n        alias: 'UnapprovedComments.Workspace.context',\r\n        name: 'Unapproved Comments Workspace Context',\r\n        js: () => import('./unapprovedcomments.context'),\r\n    },\r\n    {\r\n        type: 'workspaceContext',\r\n        alias: 'TrashedComments.Workspace.context',\r\n        name: 'Trashed Comments Workspace Context',\r\n        js: () => import('./trashedcomments.context'),\r\n    }\r\n];\r\n\r\nconst workspaceActions: Array<ManifestWorkspaceAction> = [];\r\n\r\nconst workspaceModals : Array<ManifestModal> = [];\r\n\r\nexport const manifests = [\r\n    ...workspaces,\r\n    ...workspaceViews,\r\n    ...workspaceContexts,\r\n    ...workspaceActions,\r\n    ...workspaceModals\r\n];","import { ManifestSectionSidebarApp, ManifestMenu, ManifestMenuItem } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { UNAPPROVEDCOMMENTS_ENTITY, TRASHEDCOMMENTS_ENTITY } from '../workspaces/manifest';\r\nimport { DISCUSSIONS_SECTION_ALIAS } from '../sections/manifest';\r\n\r\nexport const DISCUSSIONS_MENU_COMMENTS_ALIAS = 'uDiscussions.Menu.Comments';\r\n\r\nconst sidebarApps : Array<ManifestSectionSidebarApp> = [\r\n    {\r\n        type: 'sectionSidebarApp',\r\n        kind: 'menuWithEntityActions',\r\n        alias: 'uDiscussions.Sidebar.Comments',\r\n        name : 'Discussions Sidebar Comments',\r\n        meta : {\r\n            label : 'Comments',\r\n            menu : DISCUSSIONS_MENU_COMMENTS_ALIAS\r\n        },\r\n        conditions: [\r\n            {\r\n                alias: 'Umb.Condition.SectionAlias',\r\n                match: DISCUSSIONS_SECTION_ALIAS\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nconst menus : Array<ManifestMenu> = [\r\n    {\r\n        type: 'menu',\r\n        alias: DISCUSSIONS_MENU_COMMENTS_ALIAS,\r\n        name: 'Menu Comments',\r\n        meta: {\r\n            label: 'Comments'\r\n        }\r\n    }\r\n];\r\n\r\nexport const menuItems : Array<ManifestMenuItem> = [\r\n    {\r\n        type: 'menuItem',\r\n        alias: 'uDiscussions.MenuItem.Comments.UnapprovedComments',\r\n        name: 'Unapproved Comments',\r\n        meta: {\r\n            label: 'Unapproved Comments',\r\n            icon: 'icon-chat',\r\n            entityType: UNAPPROVEDCOMMENTS_ENTITY,\r\n            menus: [\r\n                DISCUSSIONS_MENU_COMMENTS_ALIAS\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        type: 'menuItem',\r\n        alias: 'uDiscussions.MenuItem.Comments.RemovedComments',\r\n        name: 'Recycle Bin',\r\n        meta: {\r\n            label: 'Recycle Bin',\r\n            icon: 'icon-remove',\r\n            entityType: TRASHEDCOMMENTS_ENTITY,\r\n            menus: [\r\n                DISCUSSIONS_MENU_COMMENTS_ALIAS\r\n            ]\r\n        }\r\n    }\r\n];\r\n\r\nexport const manifests = [\r\n    ...sidebarApps,\r\n    ...menus,\r\n    ...menuItems\r\n];","import { ManifestGlobalContext } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst contexts : Array<ManifestGlobalContext> = [\r\n    {\r\n        type: 'globalContext',\r\n        alias: 'Comments.Context',\r\n        name: 'Comments Context',\r\n        js: () => import('./comments.context.ts')\r\n    }\r\n]\r\n\r\nexport const manifests = [\r\n    ...contexts\r\n];","import { UmbEntryPointOnInit } from '@umbraco-cms/backoffice/extension-api';\nimport { manifests as dashboardsManifest } from './dashboards/manifest';\nimport { manifests as sectionsManifest } from './sections/manifest';\nimport { manifests as sidebarsManifest } from './sidebars/manifest';\nimport { manifests as workspacesManifest } from './workspaces/manifest';\nimport { manifests as contextsManifest } from './contexts/manifest';\n\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth';\nimport { OpenAPI } from './api/index.ts';\n\nexport const onInit: UmbEntryPointOnInit = (_host, extensionRegistry) => {\n\n    extensionRegistry.registerMany([\n        ...contextsManifest,\n        ...sectionsManifest,\n        ...dashboardsManifest,\n        ...sidebarsManifest,\n        ...workspacesManifest\n    ]);\n\n    _host.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\n        const umbOpenApi = _auth.getOpenApiConfiguration();\n        OpenAPI.TOKEN = umbOpenApi.token;\n        OpenAPI.BASE = umbOpenApi.base;\n        OpenAPI.WITH_CREDENTIALS = umbOpenApi.withCredentials;\n    });\n}"],"names":["DISCUSSIONS_SECTION_ALIAS","sections","manifests","ApiError","request","response","message","CancelError","CancelablePromise","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","Interceptors","fn","index","OpenAPI","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","encodePair","v","k","getUrl","config","options","encoder","path","substring","group","_a","url","getFormData","formData","process","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","_b","sendRequest","body","controller","getResponseHeader","responseHeader","content","getResponseBody","contentType","binaryTypes","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","transformedBody","CommmentsService","data","__request","CommentsDataSource","host","__privateAdd","_host","__privateSet","tryExecuteAndNotify","__privateGet","contentkey","id","CommentsRespository","UmbControllerBase","_commentsDataSource","_commentsRepository","StatisticsDashboard","UmbElementMixin","LitElement","html","css","__decorateClass","property","state","customElement","StatisticsDashboard$1","STATISTICS_DASHBOARD_ALIAS","dashboards","CommentsContext","_repository","_approvedComments","_unapprovedComments","_trashedComments","UmbArrayState","COMMENTS_CONTEXT","UmbContextToken","_commentsContext","_modalContext","_notificationContext","_onClickTrash","_onClickApprove","UnapprovedCommentsWorkspaceElement","comment","modalHandler","UMB_CONFIRM_MODAL","_instance","_comments","UMB_MODAL_MANAGER_CONTEXT","UMB_NOTIFICATION_CONTEXT","UnapprovedCommentsWorkspaceElement$1","_onClickDelete","_onClickRestore","TrashedCommentsWorkspaceElement","TrashedCommentsWorkspaceElement$1","APPROVEDCOMMENTS_WORKSPACE_ALIAS","UNAPPROVEDCOMMENTS_WORKSPACE_ALIAS","UNAPPROVEDCOMMENTS_ENTITY","TRASHEDCOMMENTS_WORKSPACE_ALIAS","TRASHEDCOMMENTS_ENTITY","workspaces","workspaceViews","workspaceContexts","workspaceActions","workspaceModals","DISCUSSIONS_MENU_COMMENTS_ALIAS","sidebarApps","menus","menuItems","contexts","comments_context","onInit","extensionRegistry","contextsManifest","sectionsManifest","dashboardsManifest","sidebarsManifest","workspacesManifest","UMB_AUTH_CONTEXT","_auth","umbOpenApi"],"mappings":"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"}